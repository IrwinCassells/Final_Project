}
# find
}
probsTable()
probsTable = function(df = NULL, type = 100, keywordColumn = NA, jobTitle = NA,make3D = F)
{
try(
if(is.null(df)){stop("Empty dataset",call. = F)}
else
if(is.na(keywordColumn)){stop("Empty keyword")}
else
if(make3D & is.na(jobTitle)){stop("Job title column must be supplied if 3D is required")}
)
# function to calculate the probabilities of the each keyword
{
probCalc = function()
{
}
}
# find the keyword column
{
index_key = grep(keywordColumn,names(df))
}
# find
}
probsTable()
x = data.frame(one = 1:5, two = 1:5, three = 1:5)
test = x[,2]
test = read.csv("IC_products.csv",stringsAsFactors = F)
install.packages("shiny")
require("shiny")
if
(
T
)
{
print
(
"This is cool"
)
}
if
(
F
)
{
print
(
"This is cool"
)
}
install.packages("miniUI")
install.packages("miniUI")
require("shiny")
if
(
F
)
{
print
(
"This is cool"
)
}
if
(
T
)
{
print
(
"This is cool"
)
}
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages(pack = "plotly")
install.packages(pkgs = "plotly")
require(dplyr)
install.packages("plotly")
require(plotly)
plot_ly(data = mtcars, x = wt, y = mpg, mode = "markers")
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
mtcars
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
plot_ly(mtcars, x = "wt", y = mpg, mode = "markers")
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
load(mtcars)
require(plotly)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
plot_ly(mtcars, mode = "markers")
plot_ly(mtcars, x = cyl, y = mpg, mode = "markers")
plot_ly(x=1:15,y=sin(1:15)^2,cos(1:15)^2,type = "scatter3d",mode = "markers")
plot_ly(x=1:15,y=sin(1:15)^2,cos(1:15)^2,type = "scatter3d",mode = "markers")
plot_ly(x=1:15,y=sin(1:15)^2,z = cos(1:15)^2,type = "scatter3d",mode = "markers")
plot_ly(x=sin(1:100)^2+ cos(1:100)^2,y=sin(1:100)^2,z = cos(1:100)^2,type = "scatter3d",mode = "markers")
plot_ly(x=sin(1:100)+ cos(1:100),y=sin(1:100),z = cos(1:100),type = "scatter3d",mode = "markers")
require(httpuv)
install.packages("plotly")
install.packages("plotly")
require("shiny")
if
(
T
)
{
print
(
"This is cool"
)
}
library(shiny)
if(!require(installr)) {
install.packages("installr"); require(installr)}
updateR()
if(!require(installr)) {
install.packages("installr"); require(installr)}
updateR()
install.packages("leaflet")
library(leaflet)
mmap = leaflet() %>% addTitle
library(leaflet)
mmap = leaflet() %>% addTitles
library(leaflet)
mmap = leaflet() %>% addTiles
mmap
mmap = leaflet() %>% addTiles() %>% addMarkers(laat = 39.298, lng = 76.589, popup = "JL Office")
mmap = leaflet() %>% addTiles() %>% addMarkers(lat = 39.298, lng = 76.589, popup = "JL Office")
library(leaflet)
mmap = leaflet() %>% addTiles() %>% addMarkers(lat = 39.298, lng = 76.589, popup = "JL Office")
mmap
library(leaflet)
mmap = leaflet() %>% addTiles() %>% addMarkers(lat = 39.298, lng = -76.589, popup = "JL Office")
mmap
df = data.frame(lat = c(34.2,34.3,34.4), lng = c(-56.3, -57.5, -56.4), popup = 1:3)
df %>% leaflet() %>% addTiles() %>% addMarkers()
df = data.frame(lat = c(34.2,34.3,34.4), lng = c(-56.3, -57.5, -56.4), popup = 1:3)
df %>% leaflet() %>% addTiles() %>% addMarkers(popup = df$popup)
df = data.frame(lat = c(34.2,34.3,34.4), lng = c(-56.3, -57.5, -56.4), popup = c("A","B","C"))
df %>% leaflet() %>% addTiles() %>% addMarkers(popup = df$popup)
df %>% leaflet() %>% addTiles() %>% addMarkers()
LETTERS
leaflet(addTiles(df))
addTiles(leaflet(df))
runif(n = 10,min = 35,max = 36)
set.seed(69)
df = data.frame(lat = runif(100,35,37),
lng = runif(100,-78,-76),
popups = c(
paste0("A",1:25),
paste0("B",1:25),
paste0("C",1:25),
paste0("D",1:25)
)
)
df %>% leaflet() %>% addTiles() %>% addMarkers(popup = df&popup) %>% clearMarkerClusters()
df %>% leaflet() %>% addTiles() %>% addMarkers(popup = df&popups) %>% clearMarkerClusters()
View(df)
df %>% leaflet() %>% addTiles() %>% addMarkers(popup = df$popups) %>% clearMarkerClusters()
iconTest = makeAwesomeIcon(icon = "flag",iconColor = factor(df$popups))
df %>% leaflet() %>% addTiles() %>% addMarkers(popup = df$popups,clusterOptions = markerClusterOptions(),icon = iconTest)
df
df
df
df %>% leaflet() %>% addTiles() %>% addMarkers(popup = df$popups,clusterOptions = markerClusterOptions(),icon = iconTest)
set.seed("your mother")
knitr::opts_chunk$set(echo = FALSE)
y = rnorm(100, mean = 0,sd = 1) + runif(100,min = 0,max = 100)
x = 1:100
g = ggplot(data = data.frame(x=x,y=y),mapping = aes(x=x,y=y))
require("ggplot2")
require("ggplot2")
require("plotly")
require("ggplot2")
g = ggplot(data = data.frame(x=x,y=y),mapping = aes(x=x,y=y))
g = g + geom_point()
g
require("base")
if(!require(plotly)){install.packages("plotly")}
if(!require(ggplot2)){install.packages("ggplot2")}
require(plotly)
require(ggplot2)
# Data set in which to plot
set.seed(1234)
y = rnorm(100, mean = 0,sd = 1) + runif(100,min = 0,max = 100)
x = 1:100
fiji = data.frame(matrix(nrow = 100,ncol = 2))
names(fiji) = c("x","y")
fiji$x = x
fiji$y = y
g = ggplot(fiji,aes(x = x,y = y))
g = g + geom_point()
f = plotly()
f = f$ggplotly(g)
f
g
if(!require(plotly)){install.packages("plotly")}
if(!require(ggplot2)){install.packages("ggplot2")}
require(plotly)
require(ggplot2)
# Data set in which to plot
set.seed(1234)
y = rnorm(100, mean = 0,sd = 1) + runif(100,min = 0,max = 100)
x = 1:100
fiji = data.frame(matrix(nrow = 100,ncol = 2))
names(fiji) = c("x","y")
fiji$x = x
fiji$y = y
g = ggplot(fiji,aes(x = x,y = y))
g = g + geom_point()
g
f = plotly()
f = f$ggplotly(g)
f
if(!require(plotly)){install.packages("plotly")}
if(!require(ggplot2)){install.packages("ggplot2")}
require(plotly)
require(ggplot2)
# Data set in which to plot
set.seed(1234)
y = rnorm(100, mean = 0,sd = 1) + runif(100,min = 0,max = 100)
x = 1:100
fiji = data.frame(matrix(nrow = 100,ncol = 2))
names(fiji) = c("x","y")
fiji$x = x
fiji$y = y
g = plot_ly(data = fiji,x = x, y,y)
g
if(!require(plotly)){install.packages("plotly")}
if(!require(ggplot2)){install.packages("ggplot2")}
require(plotly)
require(ggplot2)
# Data set in which to plot
set.seed(1234)
y = rnorm(100, mean = 0,sd = 1) + runif(100,min = 0,max = 100)
x = 1:100
fiji = data.frame(matrix(nrow = 100,ncol = 2))
names(fiji) = c("x","y")
fiji$x = x
fiji$y = y
g = plot_ly(data = fiji,x = ~x, y=~y)
g
"like" %in% "I like fish"
stringi::stri_detect_fixed("I like fish","like")
stringi::stri_detect_fixed("I like fish","like")
stringi::stri_detect_fixed("I like fish","(like)")
stringi::stri_detect_fixed("(I)(like)(fish)","(like)")
library(devtools)
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install_github('slidify', 'ramnathv/slidify')
install_github('slidifyLibraries', 'ramnathv/slidifyLibraries')
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install.packages("Rpresenter")
shiny::runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
?pch
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
?plot
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
library(shiny)
shinyUI
(
pageWithSidebar
(
headerPanel
(
"Boyle's Law - How accurate is Boyle's Law at 1 mol, 273.15 K?"
),
sidebarPanel
(
h5("Choose the maximum pressure and volume you want to look at"),
sliderInput(inputId = "plotSettingsX",min = 1.0,max = 100.0,step = 1.0,label = "Pressure (atm)",value = 42),
sliderInput(inputId = "plotSettingsY",min = 1.0,max = 50.0,step = 1.0,label = "Volume (dm^3)",value = 27),
h5("Choose the values of 'a' and/ or 'b' - or choose a preset:"),
selectInput(inputId = "preset",label = "Preset:",
choices = c("Argon","Carbon Dioxide","Hydrogen","Nitrogen","Oxygen","Water","Custom"),size = 1,selectize = F),
numericInput(inputId = "a_value",label = "a value [0,200]",value = 10,min = 0.0,max = 200.0,step = 0.5),
numericInput(inputId = "b_value",label = "b value [0,1]",value = 0.5,min = 0.0,max = 1.0,step = 0.01),
width = 4
),
mainPanel
(
plotOutput("abPlot",width = 1280,height = 1600),
img(src="formulae.png",style="display: block; margin-left: auto; margin-right: auto;")
)
)
)
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
library("shiny")
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
# Chunk 1
![The deviation of the models using water](capture.png)
library(knitr)
myPresentation
========================================================
author: IC
date: 21 January 2017
autosize: true
Problem
========================================================
**The problem**
- Predicting the volumes gases occupy has been done for ages.
- Prediction method is based on a simple formula: PV = nRT.
- P = Pressure (atm), V = volume (dm$^3$), n = moles (mol), T = temperature (K), R = gas constant (atm.dm$^3$/mol.K).
- Formula is based on the assumptions gas particles have zero interaction with each other.
**Correcting the problem**
- Assuming interactions between molecules is not as easy.
- 3 main types of interactions between molecules to consider.
- Though the real gas equation comes close, it does not factor in non-contact forces.
- van der Waals interactions are present in most atom-atom interactions.
- Assumes a lack of induced dipole moments, which in most cases can be ignored.
- We can correct the ideal problem by adding this term:
<span style="font-weight:bold; color:red;">$(P + n^2a/V)(V-nb) = nRT$</span>
Simple app to visualise the problem
========================================================
![The deviation of the models using water](capture.png)
- Visit https://helmbreaker2007.shinyapps.io/Gases_Gone_Bad/ for shiny app (R presenter does not support shiny apps)
Some calculations in the app
========================================================
```{r}
# some values of dioxane which do not match the ideal values
nRT = 1*0.0802*273.15; P = seq.default(1,500,25); a = 19.29; b = 0.1171
Vb = nRT / P ; Vw = b + (nRT^3)/(P*(nRT^2) + a*P^2)
library(knitr)
kable(data.frame(Boyle_Volume = Vb, vdWaals_Volume = Vw, Difference = Vb-Vw))
```
Final notes
========================================================
- Changes are minute for a single mole at 273.15 K.
- However, when performing these operations on an industrial scale, there is a significant amount.
-
myPresentation
========================================================
author: IC
date: 21 January 2017
autosize: true
Problem
========================================================
**The problem**
- Predicting the volumes gases occupy has been done for ages.
- Prediction method is based on a simple formula: PV = nRT.
- P = Pressure (atm), V = volume (dm$^3$), n = moles (mol), T = temperature (K), R = gas constant (atm.dm$^3$/mol.K).
- Formula is based on the assumptions gas particles have zero interaction with each other.
**Correcting the problem**
- Assuming interactions between molecules is not as easy.
- 3 main types of interactions between molecules to consider.
- Though the real gas equation comes close, it does not factor in non-contact forces.
- van der Waals interactions are present in most atom-atom interactions.
- Assumes a lack of induced dipole moments, which in most cases can be ignored.
- We can correct the ideal problem by adding this term:
<span style="font-weight:bold; color:red;">$(P + n^2a/V)(V-nb) = nRT$</span>
Simple app to visualise the problem
========================================================
![The deviation of the models using water](capture.png)
- Visit https://helmbreaker2007.shinyapps.io/Gases_Gone_Bad/ for shiny app (R presenter does not support shiny apps)
Some calculations in the app
========================================================
```{r}
# some values of dioxane which do not match the ideal values
nRT = 1*0.0802*273.15; P = seq.default(1,500,25); a = 19.29; b = 0.1171
Vb = nRT / P ; Vw = b + (nRT^3)/(P*(nRT^2) + a*P^2)
library(knitr)
kable(data.frame(Boyle_Volume = Vb, vdWaals_Volume = Vw, Difference = Vb-Vw))
```
Final notes
========================================================
- Changes are minute for a single mole at 273.15 K.
- However, when performing these operations on an industrial scale, there is a significant amount.
# Chunk 1
# some values of dioxane which do not match the ideal values
nRT = 1*0.0802*273.15; P = seq.default(1,500,25); a = 19.29; b = 0.1171
Vb = nRT / P ; Vw = b + (nRT^3)/(P*(nRT^2) + a*P^2)
library(knitr)
kable(data.frame(Boyle_Volume = Vb, vdWaals_Volume = Vw, Difference = Vb-Vw))
shiny::runApp('R/Coursera/Week 36/Shiny/Gases_Gone_Bad')
x = c(1,2,3,4,5,6,7,8,9,ten)
x = c(1,2,3,4,5,6,7,8,9,"ten")
order(x)
order(x,decreasing = T)
dfrow  = 275887
lmt = floor(dfrow/100000) + 1
for(i in 1:lmt)
{
lB = 100000*(i-1) + 1
rB = 100000*(i)
if(dfrow==0){break}
else
if(lB>dfrow)
{
lB = 100000*(i-2) + 1
print(paste0(lB,":",dfrow))
break
}
else
if(dfrow<rB)
{
print(paste0(lB,":",dfrow))
break
}
else
{
print(paste0(lB,":",rB))
}
}
dfrow  = 2758870
lmt = floor(dfrow/100000) + 1
for(i in 1:lmt)
{
lB = 100000*(i-1) + 1
rB = 100000*(i)
if(dfrow==0){break}
else
if(lB>dfrow)
{
lB = 100000*(i-2) + 1
print(paste0(lB,":",dfrow))
break
}
else
if(dfrow<rB)
{
print(paste0(lB,":",dfrow))
break
}
else
{
print(paste0(lB,":",rB))
}
}
install.packages("text2vec")
library(shiny)
shinyUI
(
pageWithSidebar
(
headerPanel
(
"Boyle's Law - How accurate is Boyle's Law at 1 mol, 273.15 K?"
),
sidebarPanel
(
h5("Choose the maximum pressure and volume you want to look at"),
sliderInput(inputId = "plotSettingsX",min = 1.0,max = 100.0,step = 1.0,label = "Pressure (atm)",value = 42),
sliderInput(inputId = "plotSettingsY",min = 1.0,max = 50.0,step = 1.0,label = "Volume (dm^3)",value = 27),
h5("Choose the values of 'a' and/ or 'b' - or choose a preset:"),
selectInput(inputId = "preset",label = "Preset:",
choices = c("Argon","Carbon Dioxide","Hydrogen","Nitrogen","Oxygen","Water","Custom"),size = 1,selectize = F),
numericInput(inputId = "a_value",label = "a value [0,200]",value = 10,min = 0.0,max = 200.0,step = 0.5),
numericInput(inputId = "b_value",label = "b value [0,1]",value = 0.5,min = 0.0,max = 1.0,step = 0.01),
width = 4
),
mainPanel
(
plotOutput("abPlot",width = 1280,height = 1600),
img(src="formulae.png",style="display: block; margin-left: auto; margin-right: auto;")
)
)
)
runApp('R/Coursera/Week 36')
version()
R.Version()
R.Version()$version.string
bigrquery::show()
packageVersion("bigrquery")
iconvlist()
# IC
# 20 March 2018
# Next Word Predictor
rm(list = ls())
if(!require(rJava)){install.packages("rJava")}
if(!require(RWeka)){install.packages("RWeka")}
if(!require(R.utils)){install.packages("R.utils")}
if(!require(stringi)){install.packages("stringi")}
if(!require(stringr)){install.packages("stringr")}
if(!require(textcat)){install.packages("textcat")}
if(!require(tm)){install.packages("tm")}
if(!require(markovchain)){install.packages("markovchain")}
require("rJava")
require("RWeka")
require("R.utils")
require("stringi")
require("stringr")
require("textcat")
require("tm")
require("markovchain")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
